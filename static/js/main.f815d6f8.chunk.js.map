{"version":3,"sources":["CounterNew/btn/btnNew.module.css","Counter/btn/btn.module.css","Counter/setTablet/setTablet.module.css","CounterNew/SeterTablet/setTablet/setTabletNew.module.css","Counter/Tablet/Tablet.module.css","Counter/Counter.module.css","CounterNew/CounterNew.module.css","CounterNew/NativeTablet/Tablet/TabletNew.module.css","CounterNew/NativeTablet/NativeTablet.module.css","CounterNew/SeterTablet/SeterTablet.module.css","Counter/Tablet/Tablet.tsx","Counter/btn/btn.tsx","Counter/setTablet/setTablet.tsx","Counter/Counter.tsx","Redux/Counter-reducer.tsx","Redux/SecondVerCounter-reducer.tsx","CounterNew/NativeTablet/Tablet/TabletNew.tsx","CounterNew/btn/btnNew.tsx","CounterNew/NativeTablet/NativeTablet.tsx","CounterNew/SeterTablet/setTablet/setTabletNew.tsx","CounterNew/SeterTablet/SeterTablet.tsx","CounterNew/CounterNew.tsx","App.tsx","Redux/store.tsx","index.tsx"],"names":["module","exports","tablet","s","tabletTop","setMsg","Tablet","pr","countValue","btnOnOf","maxValue","inStartValue","inMaxValue","finallyCheck","className","resetBtn","resetBtnOff","incBtn","incBtnOff","setBtn","setBtnOffCl","Btn","resetCountValue","updateCountValue","typeBtn","setStartValue","setMaxValue","setBtnOnOf","start_max_value","startValue","inStartValueCheck","disResetBtn","resetBtnDisabledChecker","incBtnDisabledChecker","setBtnDisabledChecker","resetBtnClass","incClass","setBtnClass","resetButton","disabled","onClick","incButton","setButton","setTablet","maxValueCl","startValueCl","maxValueClError","startValueClError","SetTablet","setInStartValue","setInMaxValue","MaxValueInputClass","StartValueInputClass","type","value","onChange","e","currentTarget","counter","btn","counterFlex","Counter","UpdateCountValue","ResetCountValue","SetBtnOnOf","SetInStartValue","SetInMaxValue","SetStartValue","SetMaxValue","SetInStartValueAC","newInStartValue","SetInMaxValueAC","newInMaxValue","InitialState","CounterReducer","state","action","newBoolean","newStartValue","newMaxValue","UpdateCountValueN","ResetCountValueN","SetBtnOnOfN","SetInStartValueN","SetInMaxValueN","SetStartValueN","SetMaxValueN","SetBtnVer","SetInStartValueNAC","SetInMaxValueNAC","btnVer","SecCounterReducer","TabletNew","newSetBtnClass","BtnNew","setBtnVer","BtnPath","PATH","Second_ver","First_ver","BtnPathText","NewSetButton","to","PATHS","setCounter","ChangeButton","SetCloneNavBtn","NativeCounter","NativeTablet","SetTabletNew","SeterTablet","CounterNew","path","exact","render","App","preloadedState","useSelector","countValueN","newCounter","inStartValueN","inMaxValueN","maxValueN","startValueN","btnOnOfN","dispatch","useDispatch","SetBtnOnOfAC","resetCountValueN","SetBtnOnOfNAC","SetBtnVerAC","rootReducer","combineReducers","persistedTodosString","localStorage","getItem","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f815d6f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"resetBtn\":\"btnNew_resetBtn__2BLIh\",\"resetBtnOff\":\"btnNew_resetBtnOff__bf0o-\",\"setBtn\":\"btnNew_setBtn__4NWLS\",\"setBtnOffCl\":\"btnNew_setBtnOffCl__3NJqf\",\"incBtn\":\"btnNew_incBtn__YM96m\",\"incBtnOff\":\"btnNew_incBtnOff__cWQvU\",\"newSetBtnClass\":\"btnNew_newSetBtnClass__2IGpN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"resetBtn\":\"btn_resetBtn__1rTG6\",\"resetBtnOff\":\"btn_resetBtnOff__13lCc\",\"setBtn\":\"btn_setBtn__1QgY8\",\"setBtnOffCl\":\"btn_setBtnOffCl__2MsoC\",\"incBtn\":\"btn_incBtn__oTfvz\",\"incBtnOff\":\"btn_incBtnOff__36QjH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setTablet\":\"setTablet_setTablet__2vlR-\",\"maxValueCl\":\"setTablet_maxValueCl__2-Gab\",\"startValueCl\":\"setTablet_startValueCl__3ZFCN\",\"maxValueClError\":\"setTablet_maxValueClError__1G1X9\",\"startValueClError\":\"setTablet_startValueClError__2caHf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setTablet\":\"setTabletNew_setTablet__2PKi5\",\"maxValueCl\":\"setTabletNew_maxValueCl__27w22\",\"startValueCl\":\"setTabletNew_startValueCl__2Qoti\",\"maxValueClError\":\"setTabletNew_maxValueClError__1l9hU\",\"startValueClError\":\"setTabletNew_startValueClError__Rf8ni\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tablet\":\"Tablet_tablet__1IExt\",\"tabletTop\":\"Tablet_tabletTop__3-eok\",\"setMsg\":\"Tablet_setMsg__1YtGt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__3fYRf\",\"btn\":\"Counter_btn__1EJqr\",\"counterFlex\":\"Counter_counterFlex__1SsQz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"CounterNew_counter__1hjIL\",\"btn\":\"CounterNew_btn__pFWjs\",\"counterFlex\":\"CounterNew_counterFlex__3EY6B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tablet\":\"TabletNew_tablet__25eKg\",\"tabletTop\":\"TabletNew_tabletTop__1v8B0\",\"setMsg\":\"TabletNew_setMsg__3pnZq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"NativeTablet_counter__2Fxm3\",\"btn\":\"NativeTablet_btn__APEuu\",\"counterFlex\":\"NativeTablet_counterFlex__3kynL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"SeterTablet_counter__1Yqkg\",\"btn\":\"SeterTablet_btn__WggKr\",\"counterFlex\":\"SeterTablet_counterFlex__uapR7\"};","import React from 'react';\r\nimport s from './Tablet.module.css';\r\n\r\nconst {tablet, tabletTop, setMsg} = s;\r\n\r\ntype TabletPropsType = {\r\n    countValue: number\r\n    maxValue: number\r\n    btnOnOf: boolean\r\n    inStartValue: number\r\n    inMaxValue: number\r\n}\r\n\r\n\r\nexport const Tablet = (pr: TabletPropsType) => {\r\n    const {countValue, maxValue, btnOnOf, inStartValue, inMaxValue} = pr;\r\n\r\n\r\n\r\n    const StartValueCheck = inStartValue >= 0 ?\r\n        <div>\r\n            {btnOnOf && countValue}\r\n            {!btnOnOf && <div className={setMsg}>Press 'set' to programm counter</div>}\r\n        </div>\r\n        :\r\n        <div className={setMsg}>Start value must be 0(zero) or greater</div>;\r\n\r\n\r\n    const start_max_check = inStartValue < inMaxValue ?\r\n        StartValueCheck\r\n        :\r\n        <div className={setMsg}>Max value must be greater than Start Value</div>\r\n\r\n\r\n    const inMaxValueCheck =  countValue <= inMaxValue ?\r\n        start_max_check\r\n        :\r\n        <div className={setMsg}>Please type reset!</div>\r\n\r\n    const finallyCheck = countValue >= inStartValue ?\r\n        inMaxValueCheck\r\n        :\r\n        <div className={setMsg}>Press 'set' to programm counter</div>\r\n\r\n\r\n    return (\r\n        <div className={+countValue < inMaxValue ? tablet : tabletTop}>\r\n            {finallyCheck}\r\n        </div>\r\n    )\r\n}","import React, {Dispatch, SetStateAction} from 'react';\r\nimport s from './btn.module.css';\r\n\r\nconst {resetBtn, resetBtnOff, incBtn, incBtnOff, setBtn, setBtnOffCl} = s;\r\n\r\ntype BtnPropsType = {\r\n    btnOnOf: boolean\r\n    setBtnOnOf?: (newBoolean: boolean) => void\r\n    startValue?: number\r\n    resetCountValue?: () => void\r\n    countValue: number\r\n    updateCountValue?: () => void\r\n    typeBtn: 'reset' | 'inc' | 'set'\r\n    maxValue?: any\r\n    inMaxValue: number\r\n    inStartValue: number\r\n    setStartValue?: (newX: number) => void\r\n    setMaxValue?: (newX: number) => void\r\n}\r\n\r\n\r\nexport const Btn = (pr: BtnPropsType) => {\r\n\r\n    const {\r\n        resetCountValue, countValue, updateCountValue,\r\n        typeBtn,\r\n        maxValue, inMaxValue, inStartValue, setStartValue,\r\n        setMaxValue,\r\n        btnOnOf, setBtnOnOf, startValue,\r\n    } = pr;\r\n\r\n    const start_max_value = inStartValue > inMaxValue;\r\n    const inStartValueCheck = inStartValue < 0\r\n    const disResetBtn = countValue === inStartValue;\r\n    const disInc = countValue >= inMaxValue\r\n\r\n    const resetBtnClassChecker = countValue > 0 && !inStartValueCheck && btnOnOf && !start_max_value && !disResetBtn; //тернарники\r\n    const incClassChecker = countValue < inMaxValue && !inStartValueCheck && btnOnOf && !start_max_value;// для классов кнопок(ошибка/нет ошибки)\r\n    const setBtnClassChecker = btnOnOf || inStartValueCheck || start_max_value;\r\n\r\n    const resetBtnDisabledChecker = !btnOnOf || disResetBtn || inStartValueCheck || start_max_value;//тернарники для отключения кнопок\r\n    const incBtnDisabledChecker = !btnOnOf || disInc || inStartValueCheck || start_max_value;\r\n    const setBtnDisabledChecker = btnOnOf || inStartValueCheck || start_max_value;\r\n\r\n    const resetBtnClass = resetBtnClassChecker ? resetBtn : resetBtnOff // присваиваем переменным классы в зависимости от тернарников выше\r\n    const incClass = incClassChecker ? incBtn : incBtnOff\r\n    const setBtnClass = setBtnClassChecker ? setBtnOffCl : setBtn;\r\n\r\n    const onClickSet = () => {\r\n        if (resetCountValue) {\r\n            resetCountValue()\r\n        }\r\n        if (setBtnOnOf) {\r\n            setBtnOnOf(true);\r\n        }\r\n    }\r\n\r\n\r\n    const resetButton = typeBtn === 'reset' ? <div className={resetBtnClass}>\r\n        <button disabled={resetBtnDisabledChecker}\r\n                onClick={resetCountValue}>reset\r\n        </button>\r\n    </div> : '';\r\n\r\n    const incButton = typeBtn === 'inc' ? <div className={incClass}>\r\n        <button disabled={incBtnDisabledChecker} onClick={updateCountValue}>inc\r\n        </button>\r\n    </div> : '';\r\n    const setButton = typeBtn === 'set' ? <div className={setBtnClass}>\r\n        <button disabled={setBtnDisabledChecker} onClick={onClickSet}>set</button>\r\n    </div> : '';\r\n\r\n    return (<div>\r\n            {resetButton}\r\n            {incButton}\r\n            {setButton}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEventHandler, Dispatch, SetStateAction} from 'react';\r\nimport s from './setTablet.module.css';\r\n\r\nconst {setTablet, maxValueCl, startValueCl, maxValueClError, startValueClError} = s;\r\n\r\ntype TabletPropsType = {\r\n    setBtnOnOf: (newBoolean: boolean) => void\r\n    inStartValue: number\r\n    setInStartValue: (newX: number) => void\r\n    inMaxValue: number\r\n    setInMaxValue: (newX: number) => void\r\n}\r\n\r\n\r\nexport const SetTablet = (pr: TabletPropsType) => {\r\n    const {\r\n        setInStartValue, inStartValue,\r\n        setInMaxValue, inMaxValue, setBtnOnOf\r\n    } = pr;\r\n\r\n    const start_max_value = inStartValue < inMaxValue;\r\n    const onChangeInMaxValue: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        if (e.currentTarget.value) {\r\n\r\n            setInMaxValue(+e.currentTarget.value);\r\n        }\r\n        setBtnOnOf(false);\r\n    }\r\n\r\n    const onChangeInStartValue: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        if (e.currentTarget.value) {\r\n            setInStartValue(+e.currentTarget.value);\r\n        }\r\n        setBtnOnOf(false);\r\n    }\r\n\r\n    const MaxValueInputClass = inMaxValue && start_max_value ? maxValueCl : maxValueClError;\r\n    const StartValueInputClass = inStartValue > -1 && start_max_value ? startValueCl : startValueClError;\r\n\r\n    return (\r\n        <div className={setTablet}>\r\n            <div className={MaxValueInputClass}>max value: <input type=\"number\" value={inMaxValue}\r\n                                                                  onChange={onChangeInMaxValue}/></div>\r\n            <div className={StartValueInputClass}>start value: <input type=\"number\" value={inStartValue}\r\n                                                                      onChange={onChangeInStartValue}/></div>\r\n        </div>\r\n    )\r\n}","import React, {Dispatch, SetStateAction} from 'react';\r\nimport {Tablet} from './Tablet/Tablet';\r\nimport s from './Counter.module.css'\r\nimport {Btn} from './btn/btn';\r\nimport {SetTablet} from './setTablet/setTablet';\r\n\r\nconst {counter, btn, counterFlex} = s;\r\n\r\ntype CounterPropsType = {\r\n    btnOnOf: boolean\r\n    setBtnOnOf: (newBoolean: boolean) => void\r\n    inStartValue: number\r\n    setInStartValue: (newX: number) => void\r\n    inMaxValue: number\r\n    setInMaxValue: (newX: number) => void\r\n    countValue: number\r\n    updateCountValue: () => void\r\n    setStartValue: (newX: number) => void\r\n    setMaxValue: (newX: number) => void\r\n    resetCountValue: () => void\r\n    maxValue: number\r\n    startValue: number\r\n}\r\n\r\n\r\nexport const Counter = (pr: CounterPropsType) => {\r\n\r\n    const {\r\n        countValue, updateCountValue, resetCountValue,\r\n        maxValue,\r\n        startValue, setStartValue, setMaxValue,\r\n        setInStartValue, inStartValue,\r\n        setInMaxValue, inMaxValue,\r\n        btnOnOf, setBtnOnOf\r\n    } = pr;\r\n\r\n    return (<div className={counterFlex}>\r\n            <div className={counter}>\r\n                <Tablet inStartValue={inStartValue}\r\n                        btnOnOf={btnOnOf}\r\n                        maxValue={maxValue}\r\n                        countValue={countValue}\r\n                        inMaxValue={inMaxValue}/>\r\n                <div className={btn}>\r\n                    <Btn\r\n                        btnOnOf={btnOnOf}\r\n                        inStartValue={inStartValue}\r\n                        inMaxValue={inMaxValue}\r\n                        maxValue={maxValue}\r\n                        countValue={countValue}\r\n                        typeBtn={'inc'}\r\n                        updateCountValue={updateCountValue}/>\r\n                    <Btn btnOnOf={btnOnOf}\r\n                         inStartValue={inStartValue}\r\n                         inMaxValue={inMaxValue}\r\n                         countValue={countValue}\r\n                         typeBtn={'reset'}\r\n                         resetCountValue={resetCountValue}\r\n                         startValue={startValue}/>\r\n                </div>\r\n            </div>\r\n            <div className={counter}>\r\n                <SetTablet setBtnOnOf={setBtnOnOf}\r\n                           setInStartValue={setInStartValue}\r\n                           setInMaxValue={setInMaxValue}\r\n                           inMaxValue={inMaxValue}\r\n                           inStartValue={inStartValue}/>\r\n                <div className={btn}>\r\n                    <Btn btnOnOf={btnOnOf}\r\n                         setBtnOnOf={setBtnOnOf}\r\n                         resetCountValue={resetCountValue}\r\n                         setMaxValue={setMaxValue}\r\n                         countValue={countValue}\r\n                         typeBtn={'set'}\r\n                         inMaxValue={inMaxValue}\r\n                         inStartValue={inStartValue}\r\n                         setStartValue={setStartValue}\r\n                         startValue={startValue}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export type ActionCounterType =\r\n    UpdateCountValueACType\r\n    | ResetCountValueACType\r\n    | SetBtnOnOfACType\r\n    | SetInStartValueACType\r\n    | SetInMaxValueACType\r\n    | SetStartValueACType\r\n    | SetMaxValueACType\r\n\r\nexport const UpdateCountValue = 'UPDATE-COUNT-VALUE' as const;\r\nexport const ResetCountValue = 'RESET-COUNT-VALUE' as const;\r\nexport const SetBtnOnOf = 'SET-BTN-ONOF-BOOLEAN' as const;\r\nexport const SetInStartValue = 'SET-IN-START-VALUE' as const;\r\nexport const SetInMaxValue = 'SET-IN-MAX-VALUE' as const;\r\nexport const SetStartValue = 'SET-START-VALUE' as const;\r\nexport const SetMaxValue = 'SET-MAX-VALUE' as const;\r\n\r\n\r\nexport const UpdateCountValueAC = () => ({type: UpdateCountValue} as const)\r\nexport const ResetCountValueAC = () => ({type: ResetCountValue} as const)\r\nexport const SetBtnOnOfAC = (newBoolean: boolean) => ({type: SetBtnOnOf, newBoolean} as const)\r\nexport const SetInStartValueAC = (newInStartValue: number) => ({type: SetInStartValue, newInStartValue} as const)\r\nexport const SetInMaxValueAC = (newInMaxValue: number) => ({type: SetInMaxValue, newInMaxValue} as const)\r\nexport const SetStartValueAC = (newStartValue: number) => ({type: SetStartValue, newStartValue} as const)\r\nexport const SetMaxValueAC = (newMaxValue: number) => ({type: SetMaxValue, newMaxValue} as const)\r\n\r\n\r\ntype UpdateCountValueACType = ReturnType<typeof UpdateCountValueAC>\r\ntype ResetCountValueACType = ReturnType<typeof ResetCountValueAC>\r\ntype SetBtnOnOfACType = ReturnType<typeof SetBtnOnOfAC>\r\ntype SetInStartValueACType = ReturnType<typeof SetInStartValueAC>\r\ntype SetInMaxValueACType = ReturnType<typeof SetInMaxValueAC>\r\ntype SetStartValueACType = ReturnType<typeof SetStartValueAC>\r\ntype SetMaxValueACType = ReturnType<typeof SetMaxValueAC>\r\n\r\n\r\nlet InitialState = {\r\n    countValue: 0,\r\n    maxValue: 5,\r\n    startValue: 0,\r\n    inMaxValue: 5,\r\n    inStartValue: 0,\r\n    btnOnOf: true\r\n}\r\n\r\nexport type InitialStateCounterValue = typeof InitialState;\r\n\r\n\r\nconst CounterReducer = (state: InitialStateCounterValue = InitialState, action: ActionCounterType): InitialStateCounterValue => {\r\n    switch (action.type) {\r\n        case UpdateCountValue:\r\n            if (state.countValue < state.inMaxValue) {\r\n                return {...state, countValue: state.countValue + 1}\r\n            } else {\r\n                return state\r\n            }\r\n        case ResetCountValue:\r\n            return {...state, countValue: state.inStartValue, maxValue: state.inMaxValue}\r\n        case SetBtnOnOf:\r\n            return {...state, btnOnOf: action.newBoolean}\r\n        case SetInStartValue :\r\n            return {...state, inStartValue: action.newInStartValue}\r\n        case SetInMaxValue :\r\n            return {...state, inMaxValue: action.newInMaxValue}\r\n        case SetStartValue :\r\n            return {...state, startValue: action.newStartValue}\r\n        case SetMaxValue :\r\n            return {...state, maxValue: action.newMaxValue}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default CounterReducer;","export type ActionCounterType =\r\n    UpdateCountValueACType\r\n    | ResetCountValueACType\r\n    | SetBtnOnOfACType\r\n    | SetInStartValueACType\r\n    | SetInMaxValueACType\r\n    | SetStartValueACType\r\n    | SetMaxValueACType\r\n    | SetBtnVerACType\r\n\r\nexport const UpdateCountValueN = 'UPDATE-COUNT-VALUE-N' as const;\r\nexport const ResetCountValueN = 'RESET-COUNT-VALUE-N' as const;\r\nexport const SetBtnOnOfN = 'SET-BTN-ONOF-BOOLEAN-N' as const;\r\nexport const SetInStartValueN = 'SET-IN-START-VALUE-N' as const;\r\nexport const SetInMaxValueN = 'SET-IN-MAX-VALUE-N' as const;\r\nexport const SetStartValueN = 'SET-START-VALUE-N' as const;\r\nexport const SetMaxValueN = 'SET-MAX-VALUE-N' as const;\r\nexport const SetBtnVer = 'SET-BTN-VER' as const;\r\n\r\n\r\nexport const UpdateCountValueNAC = () => ({type: UpdateCountValueN} as const)\r\nexport const ResetCountValueNAC = () => ({type: ResetCountValueN} as const)\r\nexport const SetBtnOnOfNAC = (newBoolean: boolean) => ({type: SetBtnOnOfN, newBoolean} as const)\r\nexport const SetInStartValueNAC = (newInStartValue: number) => ({type: SetInStartValueN, newInStartValue} as const)\r\nexport const SetInMaxValueNAC = (newInMaxValue: number) => ({type: SetInMaxValueN, newInMaxValue} as const)\r\nexport const SetStartValueNAC = (newStartValue: number) => ({type: SetStartValueN, newStartValue} as const)\r\nexport const SetMaxValueNAC = (newMaxValue: number) => ({type: SetMaxValueN, newMaxValue} as const)\r\nexport const SetBtnVerAC = (newBoolean: boolean) => ({type: SetBtnVer, newBoolean} as const)\r\n\r\n\r\ntype UpdateCountValueACType = ReturnType<typeof UpdateCountValueNAC>\r\ntype ResetCountValueACType = ReturnType<typeof ResetCountValueNAC>\r\ntype SetBtnOnOfACType = ReturnType<typeof SetBtnOnOfNAC>\r\ntype SetInStartValueACType = ReturnType<typeof SetInStartValueNAC>\r\ntype SetInMaxValueACType = ReturnType<typeof SetInMaxValueNAC>\r\ntype SetStartValueACType = ReturnType<typeof SetStartValueNAC>\r\ntype SetMaxValueACType = ReturnType<typeof SetMaxValueNAC>\r\ntype SetBtnVerACType = ReturnType<typeof SetBtnVerAC>\r\n\r\n\r\nlet InitialState = {\r\n    countValue: 0,\r\n    maxValue: 5,\r\n    startValue: 0,\r\n    inMaxValue: 5,\r\n    inStartValue: 0,\r\n    btnOnOf: true,\r\n    btnVer: true\r\n}\r\n\r\nexport type InitialStateCounterValue = typeof InitialState;\r\n\r\n\r\nconst SecCounterReducer = (state: InitialStateCounterValue = InitialState, action: ActionCounterType): InitialStateCounterValue => {\r\n    switch (action.type) {\r\n        case UpdateCountValueN:\r\n            if (state.countValue < state.inMaxValue) {\r\n                return {...state, countValue: state.countValue + 1}\r\n            } else {\r\n                return state\r\n            }\r\n        case ResetCountValueN:\r\n            return {...state, countValue: state.inStartValue, maxValue: state.inMaxValue}\r\n        case SetBtnOnOfN:\r\n            return {...state, btnOnOf: action.newBoolean}\r\n        case SetInStartValueN :\r\n            return {...state, inStartValue: action.newInStartValue}\r\n        case SetInMaxValueN :\r\n            return {...state, inMaxValue: action.newInMaxValue}\r\n        case SetStartValueN :\r\n            return {...state, startValue: action.newStartValue}\r\n        case SetMaxValueN :\r\n            return {...state, maxValue: action.newMaxValue}\r\n        case SetBtnVer:\r\n            return{...state, btnVer: action.newBoolean}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default SecCounterReducer;","import React from 'react';\r\nimport s from './TabletNew.module.css';\r\n\r\nconst {tablet, tabletTop, setMsg} = s;\r\n\r\ntype TabletPropsType = {\r\n    countValue: number\r\n    maxValue: number\r\n    btnOnOf: boolean\r\n    inStartValue: number\r\n    inMaxValue: number\r\n}\r\n\r\n\r\nexport const TabletNew = (pr: TabletPropsType) => {\r\n    const {countValue, maxValue, btnOnOf, inStartValue, inMaxValue} = pr;\r\n\r\n\r\n\r\n    const StartValueCheck = inStartValue >= 0 ?\r\n        <div>\r\n            {btnOnOf && countValue}\r\n            {!btnOnOf && <div className={setMsg}>Press 'set' to programm counter</div>}\r\n        </div>\r\n        :\r\n        <div className={setMsg}>Start value must be 0(zero) or greater</div>;\r\n\r\n\r\n    const start_max_check = inStartValue < inMaxValue ?\r\n        StartValueCheck\r\n        :\r\n        <div className={setMsg}>Max value must be greater than Start Value</div>\r\n\r\n\r\n    const inMaxValueCheck =  countValue <= inMaxValue ?\r\n        start_max_check\r\n        :\r\n        <div className={setMsg}>Please type reset!</div>\r\n\r\n    const finallyCheck = countValue >= inStartValue ?\r\n        inMaxValueCheck\r\n        :\r\n        <div className={setMsg}>Please type set!</div>\r\n\r\n\r\n    return (\r\n        <div className={+countValue < inMaxValue ? tablet : tabletTop}>\r\n            {finallyCheck}\r\n        </div>\r\n    )\r\n}","import React, {Dispatch, SetStateAction} from 'react';\r\nimport s from './btnNew.module.css';\r\nimport {PATHS} from '../CounterNew';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {PATH} from '../../App';\r\n\r\nconst {resetBtn, resetBtnOff, incBtn, incBtnOff, setBtn, setBtnOffCl, newSetBtnClass} = s;\r\n\r\ntype BtnPropsType = {\r\n    btnOnOf: boolean\r\n    setBtnOnOf?: (newBoolean: boolean) => void\r\n    startValue?: number\r\n    resetCountValue?: () => void\r\n    countValue: number\r\n    updateCountValue?: () => void\r\n    typeBtn: 'reset' | 'inc' | 'set' | 'newSet' | 'NavSet' | 'ChangeBtn'\r\n    maxValue?: any\r\n    inMaxValue: number\r\n    inStartValue: number\r\n    setStartValue?: (newBoolean: number) => void\r\n    setMaxValue?: (newBoolean: number) => void\r\n    btnVer?:boolean\r\n    setBtnVer?:(newBoolean: boolean) => void\r\n}\r\n\r\n\r\nexport const BtnNew = (pr: BtnPropsType) => {\r\n\r\n    const {\r\n        resetCountValue, countValue, updateCountValue,\r\n        typeBtn,\r\n        maxValue, inMaxValue, inStartValue, setStartValue,\r\n        setMaxValue,\r\n        btnOnOf, setBtnOnOf, startValue, btnVer, setBtnVer\r\n    } = pr;\r\n\r\n    const start_max_value = inStartValue > inMaxValue;\r\n    const inStartValueCheck = inStartValue < 0\r\n    const disResetBtn = countValue === inStartValue;\r\n    const disInc = countValue >= inMaxValue\r\n\r\n    const resetBtnClassChecker = countValue > 0 && !inStartValueCheck && btnOnOf && !start_max_value && !disResetBtn; //тернарники\r\n    const incClassChecker = countValue < inMaxValue && !inStartValueCheck && btnOnOf && !start_max_value;// для классов кнопок(ошибка/нет ошибки)\r\n    const setBtnClassChecker = btnOnOf || inStartValueCheck || start_max_value;\r\n\r\n    const resetBtnDisabledChecker = !btnOnOf || disResetBtn || inStartValueCheck || start_max_value;//тернарники для отключения кнопок\r\n    const incBtnDisabledChecker = !btnOnOf || disInc || inStartValueCheck || start_max_value;\r\n    const setBtnDisabledChecker = btnOnOf || inStartValueCheck || start_max_value;\r\n\r\n    const resetBtnClass = resetBtnClassChecker ? resetBtn : resetBtnOff // присваиваем переменным классы в зависимости от тернарников выше\r\n    const incClass = incClassChecker ? incBtn : incBtnOff\r\n    const setBtnClass = setBtnClassChecker ? setBtnOffCl : setBtn;\r\n\r\n    const onClickSet = () => {\r\n        if (resetCountValue) {\r\n            resetCountValue()\r\n        }\r\n        if (setBtnOnOf) {\r\n            setBtnOnOf(true);\r\n        }\r\n    }\r\n    const onClickSetN = () => {\r\n        if (resetCountValue) {\r\n            resetCountValue()\r\n        }\r\n        if (setBtnOnOf) {\r\n            setBtnOnOf(true);\r\n        }\r\n    }\r\n\r\n    const BtnPath = btnVer? PATH.Second_ver : PATH.First_ver;\r\n    const BtnPathText = btnVer? 'Go to the second ver.':'Go to the first ver.';\r\n    const OnClickChangePathBtn = ()=>{\r\n        if(setBtnVer) {\r\n            setBtnVer(!btnVer)\r\n        }\r\n    }\r\n\r\n\r\n    const resetButton = typeBtn === 'reset' ? <div className={resetBtnClass}>\r\n        <button disabled={resetBtnDisabledChecker}\r\n                onClick={resetCountValue}>reset\r\n        </button>\r\n    </div> : '';\r\n\r\n    const incButton = typeBtn === 'inc' ? <div className={incClass}>\r\n        <button disabled={incBtnDisabledChecker} onClick={updateCountValue}>inc\r\n        </button>\r\n    </div> : '';\r\n    const setButton = typeBtn === 'set' ? <div className={setBtnClass}>\r\n        <button disabled={setBtnDisabledChecker} onClick={onClickSet}>set</button>\r\n    </div> : '';\r\n    const NewSetButton = typeBtn === 'newSet' ?\r\n        <NavLink to={PATHS.setCounter} className={newSetBtnClass}>\r\n            <button>set</button>\r\n        </NavLink>\r\n        : '';\r\n    const ChangeButton = typeBtn === 'ChangeBtn' ?\r\n        <NavLink to={BtnPath} className={newSetBtnClass}>\r\n            <button onClick={OnClickChangePathBtn}>{BtnPathText}</button>\r\n        </NavLink>\r\n        : '';\r\n    const SetCloneNavBtn = typeBtn === 'NavSet' ? <NavLink to={PATHS.NativeCounter}>\r\n        <div className={setBtnClass}>\r\n            <button disabled={setBtnDisabledChecker} onClick={onClickSetN}>set</button>\r\n        </div>\r\n    </NavLink> : '';\r\n\r\n    return (<div>\r\n            {resetButton}\r\n            {incButton}\r\n            {setButton}\r\n            {NewSetButton}\r\n            {SetCloneNavBtn}\r\n            {ChangeButton}\r\n        </div>\r\n    )\r\n}","import React, {Dispatch, SetStateAction} from 'react';\r\nimport {TabletNew} from './Tablet/TabletNew';\r\nimport s from './NativeTablet.module.css'\r\nimport {BtnNew} from '../btn/btnNew';\r\n\r\n\r\nconst {counter, btn, counterFlex} = s;\r\n\r\ntype NativeTabletPropsType = {\r\n    btnOnOf: boolean\r\n    inStartValue: number\r\n    inMaxValue: number\r\n    countValue: number\r\n    updateCountValue: () => void\r\n    resetCountValue: () => void\r\n    maxValue: number\r\n    startValue: number\r\n}\r\n\r\n\r\nexport const NativeTablet = (pr: NativeTabletPropsType) => {\r\n\r\n\r\n    const {\r\n        countValue, updateCountValue, resetCountValue,\r\n        maxValue,\r\n        startValue, inStartValue, inMaxValue,\r\n        btnOnOf\r\n    } = pr;\r\n\r\n    return (\r\n\r\n        <div className={counter}>\r\n            <TabletNew inStartValue={inStartValue}\r\n                       btnOnOf={btnOnOf}\r\n                       maxValue={maxValue}\r\n                       countValue={countValue}\r\n                       inMaxValue={inMaxValue}/>\r\n            <div className={btn}>\r\n                <BtnNew\r\n                    btnOnOf={btnOnOf}\r\n                    inStartValue={inStartValue}\r\n                    inMaxValue={inMaxValue}\r\n                    maxValue={maxValue}\r\n                    countValue={countValue}\r\n                    typeBtn={'inc'}\r\n                    updateCountValue={updateCountValue}/>\r\n                <BtnNew btnOnOf={btnOnOf}\r\n                        inStartValue={inStartValue}\r\n                        inMaxValue={inMaxValue}\r\n                        countValue={countValue}\r\n                        typeBtn={'reset'}\r\n                        resetCountValue={resetCountValue}\r\n                        startValue={startValue}/>\r\n                <BtnNew btnOnOf={btnOnOf}\r\n                        inStartValue={inStartValue}\r\n                        inMaxValue={inMaxValue}\r\n                        countValue={countValue}\r\n                        resetCountValue={resetCountValue}\r\n                        startValue={startValue}\r\n                        typeBtn={'newSet'}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEventHandler, Dispatch, SetStateAction} from 'react';\r\nimport s from './setTabletNew.module.css';\r\n\r\nconst {setTablet, maxValueCl, startValueCl, maxValueClError, startValueClError} = s;\r\n\r\ntype TabletPropsType = {\r\n    setBtnOnOf: (newBool : boolean) => void\r\n    inStartValue: number\r\n    setInStartValue: (newX: number) => void\r\n    inMaxValue: number\r\n    setInMaxValue: (newX: number) => void\r\n}\r\n\r\n\r\nexport const SetTabletNew = (pr: TabletPropsType) => {\r\n    const {\r\n        setInStartValue, inStartValue,\r\n        setInMaxValue, inMaxValue, setBtnOnOf\r\n    } = pr;\r\n\r\n    const start_max_value = inStartValue < inMaxValue;\r\n    const onChangeInMaxValue: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        if (e.currentTarget.value) {\r\n            setInMaxValue(+e.currentTarget.value);\r\n        }\r\n        setBtnOnOf(false);\r\n    }\r\n\r\n    const onChangeInStartValue: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        if (e.currentTarget.value) {\r\n            setInStartValue(+e.currentTarget.value);\r\n        }\r\n        setBtnOnOf(false);\r\n    }\r\n\r\n    const MaxValueInputClass = inMaxValue && start_max_value ? maxValueCl : maxValueClError;\r\n    const StartValueInputClass = inStartValue > -1 && start_max_value ? startValueCl : startValueClError;\r\n\r\n    return (\r\n        <div className={setTablet}>\r\n            <div className={MaxValueInputClass}>max value: <input type=\"number\" value={inMaxValue}\r\n                                                                  onChange={onChangeInMaxValue}/></div>\r\n            <div className={StartValueInputClass}>start value: <input type=\"number\" value={inStartValue}\r\n                                                                      onChange={onChangeInStartValue}/></div>\r\n        </div>\r\n    )\r\n}","import React, {Dispatch, SetStateAction} from 'react';\r\nimport s from './SeterTablet.module.css'\r\nimport {BtnNew} from '../btn/btnNew';\r\nimport {SetTabletNew} from './setTablet/setTabletNew';\r\n\r\n\r\nconst {counter, btn} = s;\r\n\r\ntype SeterTabletPropsType = {\r\n    btnOnOf: boolean\r\n    setBtnOnOf: (newBoolean: boolean) => void\r\n    inStartValue: number\r\n    setInStartValue: (newX: number) => void\r\n    inMaxValue: number\r\n    setInMaxValue: (newX: number) => void\r\n    countValue: number\r\n    setStartValue: (newX: number) => void\r\n    setMaxValue: (newX: number) => void\r\n    resetCountValue: () => void\r\n    startValue: number\r\n}\r\n\r\n\r\nexport const SeterTablet = (pr: SeterTabletPropsType) => {\r\n\r\n\r\n    const {\r\n        countValue, resetCountValue,\r\n        startValue, setStartValue, setMaxValue,\r\n        setInStartValue, inStartValue,\r\n        setInMaxValue, inMaxValue,\r\n        btnOnOf, setBtnOnOf\r\n    } = pr;\r\n\r\n    return (\r\n        <div className={counter}>\r\n            <SetTabletNew setBtnOnOf={setBtnOnOf}\r\n                          setInStartValue={setInStartValue}\r\n                          setInMaxValue={setInMaxValue}\r\n                          inMaxValue={inMaxValue}\r\n                          inStartValue={inStartValue}/>\r\n            <div className={btn}>\r\n                <BtnNew btnOnOf={btnOnOf}\r\n                        setBtnOnOf={setBtnOnOf}\r\n                        resetCountValue={resetCountValue}\r\n                        setMaxValue={setMaxValue}\r\n                        countValue={countValue}\r\n                        typeBtn={'NavSet'}\r\n                        inMaxValue={inMaxValue}\r\n                        inStartValue={inStartValue}\r\n                        setStartValue={setStartValue}\r\n                        startValue={startValue}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {Dispatch, SetStateAction} from 'react';\r\nimport {TabletNew} from './NativeTablet/Tablet/TabletNew';\r\nimport s from './CounterNew.module.css'\r\n\r\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\r\nimport {NativeTablet} from './NativeTablet/NativeTablet';\r\nimport {SeterTablet} from './SeterTablet/SeterTablet';\r\n\r\nconst {counter, btn, counterFlex} = s;\r\n\r\ntype CounterPropsType = {\r\n    btnOnOf: boolean\r\n    setBtnOnOf: (newBoolean: boolean) => void\r\n    inStartValue: number\r\n    setInStartValue: (newX: number) => void\r\n    inMaxValue: number\r\n    setInMaxValue: (newX: number) => void\r\n    countValue: number\r\n    updateCountValue: () => void\r\n    setStartValue: (newX: number) => void\r\n    setMaxValue: (newX: number) => void\r\n    resetCountValue: () => void\r\n    maxValue: number\r\n    startValue: number\r\n}\r\n\r\nexport const PATHS = {\r\n    NativeCounter: '/second/nativeCounter',\r\n    setCounter: '/second/setTablet',\r\n}\r\n\r\nexport const CounterNew = (pr: CounterPropsType) => {\r\n\r\n\r\n    const {\r\n        countValue, updateCountValue, resetCountValue,\r\n        maxValue,\r\n        startValue, setStartValue, setMaxValue,\r\n        setInStartValue, inStartValue,\r\n        setInMaxValue, inMaxValue,\r\n        btnOnOf, setBtnOnOf\r\n    } = pr;\r\n\r\n    return (\r\n\r\n        <div className={counterFlex}>\r\n\r\n            <Switch>\r\n\r\n                <Route path={'/second/'} exact render={() => <Redirect to={PATHS.NativeCounter}/>}/>\r\n\r\n\r\n                <Route path={PATHS.NativeCounter} render={() => <NativeTablet inStartValue={inStartValue}\r\n                                                                              inMaxValue={inMaxValue}\r\n                                                                              startValue={startValue}\r\n                                                                              maxValue={maxValue}\r\n                                                                              countValue={countValue}\r\n                                                                              updateCountValue={updateCountValue}\r\n                                                                              resetCountValue={resetCountValue}\r\n                                                                              btnOnOf={btnOnOf}\r\n                />}/>\r\n\r\n\r\n                <Route path={PATHS.setCounter} render={() => <SeterTablet inStartValue={inStartValue}\r\n                                                                          setInStartValue={setInStartValue}\r\n                                                                          inMaxValue={inMaxValue}\r\n                                                                          setInMaxValue={setInMaxValue}\r\n                                                                          startValue={startValue}\r\n                                                                          setStartValue={setStartValue}\r\n                                                                          setMaxValue={setMaxValue}\r\n                                                                          countValue={countValue}\r\n                                                                          resetCountValue={resetCountValue}\r\n                                                                          btnOnOf={btnOnOf}\r\n                                                                          setBtnOnOf={setBtnOnOf}\r\n                />}/>\r\n\r\n            </Switch>\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppStateCounterType} from './Redux/store';\nimport {Counter} from './Counter/Counter';\nimport {\n    ResetCountValueAC,\n    SetBtnOnOfAC, SetInMaxValueAC,\n    SetInStartValueAC,\n    UpdateCountValueAC\n} from './Redux/Counter-reducer';\nimport {\n    ResetCountValueNAC,\n    SetBtnOnOfNAC, SetBtnVerAC,\n    SetInMaxValueNAC,\n    SetInStartValueNAC,\n    UpdateCountValueNAC\n} from './Redux/SecondVerCounter-reducer';\nimport {CounterNew} from './CounterNew/CounterNew';\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\nimport {BtnNew} from './CounterNew/btn/btnNew';\n\nexport const PATH = {\n    First_ver: '/first',\n    Second_ver: '/second',\n}\n\nfunction App() {\n\n\n    const countValue = useSelector<AppStateCounterType, number>(state => state.counter.countValue)\n    const inStartValue = useSelector<AppStateCounterType, number>(state => state.counter.inStartValue)\n    const inMaxValue = useSelector<AppStateCounterType, number>(state => state.counter.inMaxValue)\n    const maxValue = useSelector<AppStateCounterType, number>(state => state.counter.maxValue)\n    const startValue = useSelector<AppStateCounterType, number>(state => state.counter.startValue)\n    const btnOnOf = useSelector<AppStateCounterType, boolean>(state => state.counter.btnOnOf)\n\n    const countValueN = useSelector<AppStateCounterType, number>(state => state.newCounter.countValue)\n    const inStartValueN = useSelector<AppStateCounterType, number>(state => state.newCounter.inStartValue)\n    const inMaxValueN = useSelector<AppStateCounterType, number>(state => state.newCounter.inMaxValue)\n    const maxValueN = useSelector<AppStateCounterType, number>(state => state.newCounter.maxValue)\n    const startValueN = useSelector<AppStateCounterType, number>(state => state.newCounter.startValue)\n    const btnOnOfN = useSelector<AppStateCounterType, boolean>(state => state.newCounter.btnOnOf)\n    const btnVer = useSelector<AppStateCounterType, boolean>(state => state.newCounter.btnVer)\n\n    const dispatch = useDispatch()\n\n    const resetCountValue = () => {\n        dispatch(ResetCountValueAC())\n    }\n\n    const UpdateCountValue = () => {\n        dispatch(UpdateCountValueAC())\n    }\n\n    const SetBtnOnOf = (newBoolean: boolean) => {\n        dispatch(SetBtnOnOfAC(newBoolean))\n    }\n\n    const SetInStartValue = (newInStartValue: number) => {\n        dispatch(SetInStartValueAC(newInStartValue))\n    }\n    const SetInMaxValue = (newInMaxValue: number) => {\n        dispatch(SetInMaxValueAC(newInMaxValue))\n    }\n\n    const SetStartValue = (newStartValue: number) => {\n        dispatch(SetInStartValueAC(newStartValue))\n    }\n    const SetMaxValue = (newMaxValue: number) => {\n        dispatch(SetInMaxValueAC(newMaxValue))\n    }\n\n    const resetCountValueN = () => {\n        dispatch(ResetCountValueNAC())\n    }\n\n    const UpdateCountValueN = () => {\n        dispatch(UpdateCountValueNAC())\n    }\n\n    const SetBtnOnOfN = (newBoolean: boolean) => {\n        dispatch(SetBtnOnOfNAC(newBoolean))\n    }\n\n    const SetInStartValueN = (newInStartValue: number) => {\n        dispatch(SetInStartValueNAC(newInStartValue))\n    }\n    const SetInMaxValueN = (newInMaxValue: number) => {\n        dispatch(SetInMaxValueNAC(newInMaxValue))\n    }\n\n    const SetStartValueN = (newStartValue: number) => {\n        dispatch(SetInStartValueNAC(newStartValue))\n    }\n    const SetMaxValueN = (newMaxValue: number) => {\n        dispatch(SetInMaxValueNAC(newMaxValue))\n    }\n\n    const SetBtnVer = (newBoolean: boolean) => {\n        dispatch(SetBtnVerAC(newBoolean))\n    }\n\n\n    return (<div>\n            <HashRouter>\n                <div className={'BtnToChangeRoute'}>\n                    <BtnNew btnOnOf={btnOnOf}\n                            countValue={countValue}\n                            typeBtn={'ChangeBtn'}\n                            inMaxValue={inMaxValue}\n                            inStartValue={inStartValue}\n                            btnVer={btnVer}\n                            setBtnVer={SetBtnVer}/>\n                </div>\n\n\n                <Switch>\n                    <Route path={'/'} exact render={() => <Redirect to={PATH.First_ver}/>}/>\n\n                    <Route path={PATH.First_ver} render={() => <Counter btnOnOf={btnOnOf}\n                                                                        setBtnOnOf={SetBtnOnOf}\n                                                                        inStartValue={inStartValue}\n                                                                        setInStartValue={SetInStartValue}\n                                                                        inMaxValue={inMaxValue}\n                                                                        setInMaxValue={SetInMaxValue}\n                                                                        countValue={countValue}\n                                                                        updateCountValue={UpdateCountValue}\n                                                                        setStartValue={SetStartValue}\n                                                                        setMaxValue={SetMaxValue}\n                                                                        resetCountValue={resetCountValue}\n                                                                        maxValue={maxValue}\n                                                                        startValue={startValue}\n                    />}/>\n\n                    <Route path={PATH.Second_ver} render={() => <CounterNew btnOnOf={btnOnOfN}\n                                                                            setBtnOnOf={SetBtnOnOfN}\n                                                                            inStartValue={inStartValueN}\n                                                                            setInStartValue={SetInStartValueN}\n                                                                            inMaxValue={inMaxValueN}\n                                                                            setInMaxValue={SetInMaxValueN}\n                                                                            countValue={countValueN}\n                                                                            updateCountValue={UpdateCountValueN}\n                                                                            setStartValue={SetStartValueN}\n                                                                            setMaxValue={SetMaxValueN}\n                                                                            resetCountValue={resetCountValueN}\n                                                                            maxValue={maxValueN}\n                                                                            startValue={startValueN}\n\n\n                    />}/>\n\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","import {combineReducers, createStore} from 'redux';\r\nimport CounterReducer from './Counter-reducer';\r\n\r\nimport SecCounterReducer from './SecondVerCounter-reducer';\r\n\r\nexport type AppStateCounterType = ReturnType<typeof rootReducer>\r\nexport type StoreType = typeof store\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    counter: CounterReducer,\r\n    newCounter : SecCounterReducer\r\n})\r\n\r\nlet preloadedState;\r\nconst persistedTodosString = localStorage.getItem('app-state')\r\nif (persistedTodosString) {\r\n    preloadedState = JSON.parse(persistedTodosString)\r\n}\r\n\r\nexport const store = createStore(rootReducer, preloadedState);\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem('app-state', JSON.stringify(store.getState()));\r\n})\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from './Redux/store';\n\n\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}